{ 
    "_id" : ObjectId("5cd01b959f3d58286819063f"), 
    "content" : "<p>const express=require('express');</p> <p>var server=express();</p> <p>//cookie</p> <p>server.use('/',function (req,res)   {</p> <p>    res.cookie('user','blue',{path:'/aaa',maxAge:30*24*3600*1000});</p> <p>    res.send('ok');</p> <p>})</p> <p></p> <p>server.listen(8080);</p>", 
    "id" : "1", 
    "title" : "cookie"
}
{ 
    "_id" : ObjectId("5cd01c44fff8004970e2cf1a"), 
    "title" : "https", 
    "content" : "<p>1.http是明文协议</p> <p>传递的数据容易被偷窥和篡改</p> <p>对称加密(加密规则和解密规则一样)</p> <p>2.密钥的传递问题</p> <p>非对称加密</p> <p>密钥分为两个</p> <p>公钥和私钥(举个例子，真正的算法不是这样)rsa算法</p> <p>数学基础是两个超大素数求乘积</p> <p>4654*165413123(私钥) 私钥数据只能用公钥解密</p> <p>但是分解因子非常麻烦</p> <p>769832674442(公钥) 公钥数据只能用私钥解密</p> <p>3.非对称加密特别慢</p> <p>第一次先用非对称加密传输密钥</p> <p>然后用对称算法加密数据 </p>", 
    "id" : "2", 
    "__v" : NumberInt(0)
}
{ 
    "_id" : ObjectId("5cd01d46ba06264b1c592bbb"), 
    "title" : "nginx", 
    "content" : "<p>1停止防火墙</p> <p>systemctl stop firewalld.service</p> <p>2</p> <p>setenforce 0</p> <p>3依赖模块</p> <p>yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake</p> <p>yum -y install wget httpd-tools vim</p> <p>4安装nginx</p> <p>http://nginx.org/en/linux_packages.html#RHEL-CentOS</p> <p>vim /etc/yum.repos.d/nginx.repo</p> <p>[nginx]</p> <p>name=nginx repo</p> <p>baseurl=http://nginx.org/packages/centos/7/$basearch/</p> <p>gpgcheck=0</p> <p>enabled=1</p> <p></p> <p>yum install nginx</p> <p>修改default.conf的server_name localhost www.yangqq</p> <p>可以映射</p> <p>https配置</p> <p>https://help.aliyun.com/knowledge_detail/95491.html?spm=5176.2020520154.cas.25.355656a7j0NKaK</p> <p>添加内容到nginx.conf的server中</p>", 
    "id" : "3", 
    "__v" : NumberInt(0)
}
{ 
    "_id" : ObjectId("5cd0284bca0927409c20c999"), 
    "title" : "跨域方式", 
    "content" : "jsonp cors postMessage window.name hash window.domain websocket nginx配置", 
    "id" : "4", 
    "__v" : NumberInt(0)
}
{ 
    "_id" : ObjectId("5cd0c658b4b679203c32a170"), 
    "title" : "bfc", 
    "content" : "<p>https://www.bilibili.com/video/av46317897?from=search&seid=12032765134805631088</p> <p>bfc block formatting context</p> <p>    块级格式化上下文</p> <p>bfc的目的</p> <p>形成一个完全独立的空间，让空间中的子元素不会影响到外面的布局</p> <p>触发bfc</p> <p>    float不为none</p> <p>    position不为relative和static</p> <p>    overflow为auto scroll和hidden</p> <p>    display为table-cell或inline-block</p> <p>解决的问题</p> <p>解决浮动元素令父元素高度塌陷的问题</p> <p>    页面中有一个父元素和几个子元素</p> <p>    这几个子元素都为浮动时</p> <p>    父元素高度坍塌</p> <p>    因为浮动的子元素脱离了文档流</p> <p>    被提起来形成新的队列</p> <p>    下方普通队列中的元素无法触及</p> <p>    父元素检测不到它的存在无法被撑开</p> <p>    形成父元素高度坍塌</p> <p>    可以给父元素设置</p> <p>    overflow:hidden;</p> <p>    display:table-cell;</p> <p>    display: block;</p> <p>    position:fixed;</p> <p>    position:absolute;</p> <p>    触发了bfc的容器就是页面上一个完全隔离开的容器</p> <p>    容器的子元素不会影响外面的元素</p> <p>    触发了bfc的父元素在计算高度时</p> <p>    不得不让浮动的子元素参与进来</p> <p>解决高度坍塌的问题</p> <p>    父元素也浮动起来</p> <p>        优点:代码量极少</p> <p>        缺点：影响之后的元素排列</p> <p>    给父元素添加一个固定高度(只适用于已知子元素高度的情况)</p> <p>        优点:没有学习成本</p> <p>        缺点:不灵活，难以维护</p> <p>    在浮动的子元素后面添加一个空元素</p> <p>    设置{clear:both}清除浮动</p> <p>        优点:简单易懂</p> <p>        缺点:增加无意义标签，不利于以后维护</p> <p>    为浮动的最后一个子元素设置伪元素::after{clear:both}</p> <p>        优点:结构和语义完全正确</p> <p>        缺点:复用不当导致代码量增加</p> <p>解决自适应布局的问题</p> <p>    两栏布局(左侧定宽，右侧自适应)</p> <p>    float:left;   margin-right: 200px;</p> <p>    width:200px;</p> <p>解决外边距垂直方向重合问题</p> <p>    垂直方向margin重合</p> <p>    p(margin-bottom:20px)</p> <p>    <div style=\"overflow:hidden\"></p> <p>    p(margin-top:30px)</p> <p>    </div></p> <p>    为其中一个p元素的外面包裹一层父元素</p> <p>    并且触发父元素bfc如{overflow:hidden}</p> <p>    </p>", 
    "id" : "5", 
    "__v" : NumberInt(0)
}
